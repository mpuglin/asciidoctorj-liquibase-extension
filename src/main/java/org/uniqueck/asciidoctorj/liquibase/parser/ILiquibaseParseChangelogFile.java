// *** WARNING: DO NOT MODIFY *** This is a generated Java source code! 
// 
// Generated by LF-ET 2.1.5 (210303b), https://www.lohrfink.de/lfet
// From decision table
// "/opt/data/github/asciidoctorj-liquibase-extension/src/main/resources/LiquibaseParseChangelogFile.lfet"
// 30.03.2021 00:54
// 
// Prolog Standard ---->
// profile LFET.Java.Prolog.Standard.Interface.ini not found
// used LF-ET 2.1.5 (210303b) build in default

package org.uniqueck.asciidoctorj.liquibase.parser;

interface ILiquibaseParseChangelogFile
{
 
    // Prolog Standard <----

    // Prolog Decision Table ---->
    // $$Package=org.uniqueck.asciidoctorj.liquibase.parser
    // $$InterfaceTraceAfterRule=true
    // $$InterfaceRuleGroups = true
    // $$InterfaceName=ILiquibaseParseChangelogFile
    // $$InterfaceRulesClassname=LiquibaseParseChangelogFileRules
    // Prolog Decision Table <----
    
    /** 
     * <b>B01: Element = createTable</b>
     */
    boolean isElementEqualCreateTable();
    
    /** 
     * <b>B02: Element = include</b>
     */
    boolean isElementEqualInclude();
    
    /** 
     * <b>B03: Element = changeSet</b>
     */
    boolean isElementEqualChangeSet();
    
    /** 
     * <b>B04: Element = addPrimaryKey</b>
     */
    boolean isElementEqualAddPrimaryKey();
    
    /** 
     * <b>B05: Element = dropTable</b>
     */
    boolean isElementEqualDropTable();
    
    /** 
     * <b>B06: Element = preConditions</b>
     */
    boolean isElementEqualPreConditions();
    
    /** 
     * <b>B07: Element = sql</b>
     */
    boolean isElementEqualSql();
    
    /** 
     * <b>B08: Element = createSequence</b>
     */
    boolean isElementEqualCreateSequence();
    
    /** 
     * <b>B09: Element = createProcedure</b>
     */
    boolean isElementEqualCreateProcedure();
    
    /** 
     * <b>B10: Element = renameColumn</b>
     */
    boolean isElementEqualRenameColumn();
    
    /** 
     * <b>B11: Element = comment</b>
     */
    boolean isElementEqualComment();
    
    /** 
     * <b>B12: Element = addColumn</b>
     */
    boolean isElementEqualAddColumn();
    
    /** 
     * <b>B13: Element = dropColumn</b>
     */
    boolean isElementEqualDropColumn();
    
    /** 
     * <b>B14: Element = rollback</b>
     */
    boolean isElementEqualRollback();
    
    /** 
     * <b>B15: Element = dropSequence</b>
     */
    boolean isElementEqualDropSequence();
    
    /** 
     * <b>B16: Element = addUniqueConstraint</b>
     */
    boolean isElementEqualAddUniqueConstraint();
    
    /** 
     * <b>B17: Element = addForeignKeyConstraint</b><br>
     * <br>
     * {@code <addForeignKeyConstraint baseTableName="DEPLOYMENT_TRIGGER" baseColumnNames="DEPLOYMENTUMGEBUNG_ID" referencedTableName="DEPLOYMENT_UMGEBUNG" referencedColumnNames="ID" constraintName="DEPLOYMENT_TRIGGER_DEPLOY_FK1" />}
     */
    boolean isElementEqualAddForeignKeyConstraint();
    
    /** 
     * <b>B18: Element = tagDatabase</b><br>
     * <br>
     * {@code <tagDatabase tag="1.X.FINAL" />}
     */
    boolean isElementEqualTagDatabase();
    
    /** 
     * <b>B19: tag = tillTag</b>
     */
    boolean isTagEqualTillTag();
    
    /** 
     * <b>A01: extract Table</b>
     */
    void doExtractTable();
    
    /** 
     * <b>A02: follow include</b>
     */
    void doFollowInclude();
    
    /** 
     * <b>A03: parse changeSet</b>
     */
    void doParseChangeSet();
    
    /** 
     * <b>A04: set primary key for column</b>
     */
    void doSetPrimaryKeyForColumn();
    
    /** 
     * <b>A05: drop Table</b>
     */
    void doDropTable();
    
    /** 
     * <b>A06: rename Column</b>
     */
    void doRenameColumn();
    
    /** 
     * <b>A07: add Column</b>
     */
    void doAddColumn();
    
    /** 
     * <b>A08: drop Column</b>
     */
    void doDropColumn();
    
    /** 
     * <b>A09: addForeignKeyConstraint</b><br>
     * <br>
     * {@code <addForeignKeyConstraint baseTableName="DEPLOYMENT_TRIGGER" baseColumnNames="DEPLOYMENTUMGEBUNG_ID" referencedTableName="DEPLOYMENT_UMGEBUNG" referencedColumnNames="ID" constraintName="DEPLOYMENT_TRIGGER_DEPLOY_FK1" />}
     */
    void doAddForeignKeyConstraint();
    
    /** 
     * <b>A10: log unsupported element</b>
     */
    void doLogUnsupportedElement();
    
    /** 
     * <b>A11: ignore element</b>
     */
    void doIgnoreElement();
    
    /** 
     * <b>A12: skip tag</b><br>
     * <br>
     * {@code <tagDatabase tag="1.X.FINAL" />}
     */
    void doSkipTag();
    
    /** 
     * <b>A13: finish parsing</b>
     */
    void doFinishParsing();
    
    void doTrace(java.lang.String dtName, java.lang.String version, int rules, int rule);
    
    void doTraceAfterRule(java.lang.String dtName, java.lang.String version, int rules, int rule);

    // Epilog Standard ---->
    // profile LFET.Java.Epilog.Standard.Interface.ini not found
    // used LF-ET 2.1.5 (210303b) build in default

}
 
// Epilog Standard <----

// End of generated Java source code
// Generated by LF-ET 2.1.5 (210303b), https://www.lohrfink.de/lfet

